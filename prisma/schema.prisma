// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  enable    Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  role      Role     @default(USER)
  photos    Photo[]
  cart      Cart?
  orders    Order[]
}

enum Role {
  USER
  ADMIN
}

model Photo {
  id            Int            @id @default(autoincrement())
  type          String?        
  title         String
  url           String
  asset_id      String?
  public_id     String?
  secure_url    String?
  price         Float
  sold          Int            @default(0)
  createdAt     DateTime       @default(now()) @db.Timestamp(0)
  updatedAt     DateTime       @updatedAt @db.Timestamp(0)
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    Int            @map("category_id")
  PhotosCart    photoOnCart[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int            @map("user_id")
  photoKeywords PhotoKeyword[]
  photoOrders   PhotoOrder[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  url       String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  Photos    Photo[]
}

model photoOnCart {
  id        Int      @id @default(autoincrement())
  photos    Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId   Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  price     Float
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model Keyword {
  id            Int            @id @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now()) @db.Timestamp(0)
  updatedAt     DateTime       @updatedAt @db.Timestamp(0)
  photoKeywords PhotoKeyword[]
}

model PhotoKeyword {
  id        Int @id @default(autoincrement())
  photoId   Int
  keywordId Int

  photo   Photo   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@map("photo_keyword")
}

model Cart {
  id         Int           @id @default(autoincrement())
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartTotal  Decimal       @db.Decimal(7, 2)
  userId     Int           @unique @map("user_id")
  cartPhotos photoOnCart[]
}

model Order {
  id            Int           @id @default(autoincrement())
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentDate   DateTime      @updatedAt @db.Timestamp(0)
  total         Decimal       @db.Decimal(7, 2)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int           @map("user_id")
  photoOrders   PhotoOrder[]
}

enum PaymentStatus {
  PENDING
  CONFIRM
  REJECT
}

model PhotoOrder {
  id      Int     @id @default(autoincrement())
  photoId Int
  orderId Int
  price   Decimal @db.Decimal(7, 2)

  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("photo_order")
}
